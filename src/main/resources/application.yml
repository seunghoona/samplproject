server:
  port: 8080 # 서버 기본 포트 설정
  servlet:
    session:
      timeout: 7d
      tracking-modes: cookie # URL 에 jsessionid 붙는 것을 방지 ( URL Rewriting 방지)
      cookie:
        name: PROJECT_USER_SESSION
  shutdown: graceful

  compression:
    enabled: true
    mime-types: text/html,text/plain,text/css,application/javascript,application/json
    min-response-size: 500

spring:

  lifecycle:
    timeout-per-shutdown-phase: 30s #Default 값은 30초이다

  servlet:
    multipart:
      max-file-size: 300MB
      max-request-size: 300MB
  mvc:
    hiddenmethod:
      filter:
        enabled: true
    pathmatch:
      matching-strategy: ant-path-matcher

  datasource:
    hikari:
      maximum-pool-size: 10 # 최대 커넥션 수
      connection-timeout: 10000 # pool 에서 커넥션을 가져오기 위한 기다리는 시간 ( 현재 값 : 10s , 기본 30s )
      max-lifetime: 1800000 # HikariCP 의 커넥션 라이프 시간 , 기본 가이드는 DB 의 wait_timeout 설정보다 2~3초 짧게 권고
  jpa:
    # true : 사용자에게 응답 또는 view가 렌더링 될 때까지 영속성컨텍스트를 유지한다. 영속성 컨텍스트와 DB 커넥션은 1:1로 물고있는 관계이기 때문에 프레젠테이션 로직까지 DB 커넥션 자원을 낭비하게 됨.
    # false : Transaction이 끝나면 영속성컨텍스트 또한 닫힌다.
    open-in-view: true
    hibernate:
      # create : SessionFactory가 시작될 때 데이터베이스 drop을 실행하고 생성된 DDL을 실행한다
      # update : 변경된 스키마를 적용한다
      # none : 아무것도 실행하지 않는다 (대부분의 DB에서 기본값이다)
      # validate : 변경된 스키마가 있다면 변경점을 출력하고 애플리케이션을 종료한다
      ddl-auto: create
    properties:
      hibernate:
        show_sql: true # 하이버네이트가 실행한 모든 SQL문을 콘솔로 출력
        format_sql: true # SQL문을 가독성 있게 표현
        use_sql_comments: true # 코멘트 출력
        hibernate.dialect: org.hibernate.dialect.MySQL5InnoDBDialect #MySQL


